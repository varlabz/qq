#!/bin/bash

command -v jq >/dev/null || { echo "Error: 'jq' is required but not installed. Please install it."; exit 1; }
command -v curl >/dev/null || { echo "Error: 'curl' is required but not installed. Please install it."; exit 1; }

# Load environment variables from .env or/and ~/.config/qq-env
# Loads user-specific configuration first, then project-specific
[[ -f ~/.config/qq-env ]] && source ~/.config/qq-env
[[ -f ./.env ]] && source ./.env

if [[ -z "$LLM_API_KEY" ]]; then
    echo "LLM_API_KEY is not set. Please set it in your .env or environment." >&2
    exit 1
fi

# Default values for optional environment variables
LLM_TEMPERATURE="${LLM_TEMPERATURE:-0.0}"
LLM_MODEL="${LLM_MODEL:-gpt-4o-mini}"
LLM_BASE_URL="${LLM_BASE_URL:-https://api.openai.com/v1/chat/completions}"

# Function to send a message to the LLM API
_message() {
    local prompt="$1"
    local user_prompt="$2"
    local json_payload=$(jq -n \
        --arg prompt "$prompt" \
        --arg user "$user_prompt" \
        --arg llm_temperature "$LLM_TEMPERATURE" \
        --arg llm_model "$LLM_MODEL" \
        '{
            "messages": [
                {
                    "role": "system",
                    "content": $prompt
                },
                {
                    "role": "user",
                    "content": $user
                }
            ],
            "stream": true,
            "seed": 2025,   
            "temperature": ($llm_temperature | tonumber),
            "model": $llm_model
        }') || {
        echo "Error: Failed to generate JSON payload with jq." >&2
        exit 1
    }

    curl -sS -X POST "$LLM_BASE_URL" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $LLM_API_KEY" \
        -d "$json_payload" \
            | sed -e '/^:/d' -e '/data: \[DONE\]/d' -e 's/^data://' \
            | jq -rj '.choices[0]?.delta.content // .error.message // ""' || {
            echo "Error: Failed to parse response from LLM" >&2
            exit 1
        }
    echo ""
}

# Default system prompt
prompt="You are a helpful assistant."
user_prompt=""

# If the last parameter is '-', read the user prompt from stdin
# example: qq "You are a helpful assistant." - < file.txt
if [[ "${!#}" == "-" ]]; then
    # All parameters the system prompt
    prompt="$*"
    [[ "$prompt" == "-" ]] && prompt="You are a helpful assistant."
    user_prompt="$(cat)"
    _message "$prompt" "$user_prompt"
    exit 0
fi

# If there is only one argument, it's the user prompt
# example: qq "Hello, how are you?"
if [[ $# -eq 1 ]]; then
    user_prompt="$1"
    _message "$prompt" "$user_prompt"
    exit 0
fi

# If there are multiple arguments, the first is the system prompt, the rest is the user prompt
# example: qq "You are a helpful assistant." Hello, how are you?
if [[ $# -gt 1 ]]; then
    prompt="$1"
    shift # Remove the first argument (system prompt)
    user_prompt="$*" # The rest of the arguments form the user prompt
    _message "$prompt" "$user_prompt"
    exit 0
fi

echo "Usage: $0 <prompt> <message>"
echo "       $0 <message>"
echo "       $0 <prompt> - (reads message from stdin)"
exit 1
